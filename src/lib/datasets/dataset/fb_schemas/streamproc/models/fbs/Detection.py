# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Detection(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDetection(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Detection()
        x.Init(buf, n + offset)
        return x

    # Detection
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Detection
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Detection
    def Conf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Detection
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Detection
    def Bbox(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from datasets.dataset.fb_schemas.streamproc.models.fbs.Box import Box #from streamproc.models.fbs.Box import Box
            obj = Box()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DetectionStart(builder): builder.StartObject(4)
def DetectionAddId(builder, id): builder.PrependUint64Slot(0, id, 0)
def DetectionAddConf(builder, conf): builder.PrependFloat32Slot(1, conf, 0.0)
def DetectionAddLabel(builder, label): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)
def DetectionAddBbox(builder, bbox): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bbox), 0)
def DetectionEnd(builder): return builder.EndObject()
