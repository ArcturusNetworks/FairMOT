# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Detections(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDetections(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Detections()
        x.Init(buf, n + offset)
        return x

    # Detections
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Detections
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Detections
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Detections
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from datasets.dataset.fb_schemas.streamproc.models.fbs.Detection import Detection #from streamproc.models.fbs.Detection import Detection
            obj = Detection()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Detections
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Detections
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def DetectionsStart(builder): builder.StartObject(3)
def DetectionsAddId(builder, id): builder.PrependUint64Slot(0, id, 0)
def DetectionsAddTimestamp(builder, timestamp): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)
def DetectionsAddData(builder, data): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def DetectionsStartDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DetectionsEnd(builder): return builder.EndObject()
