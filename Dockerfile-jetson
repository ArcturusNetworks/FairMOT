FROM nvcr.io/nvidia/l4t-pytorch:r32.4.2-pth1.2-py3

ENV DEBIAN_FRONTEND="noninteractive"
ENV MAKEFLAGS=-j6
ENV TERM "xterm-256color"
WORKDIR /src

RUN apt-get update && \
  apt-get install -qq -y --no-install-recommends \
  ca-certificates \
  vim \
  asciidoc \
  git \
  curl \
  wget \
  autoconf \
  autogen \
  automake \
  libtool \
  scons \
  make \
  gcc \
  g++ \
  unzip \
  bzip2 \
  pkg-config \
  libopenblas-dev \
  liblapack-dev \
  libeigen3-dev \
  libssl-dev \
  python3 \
  python3-pip \
  doxygen \
  graphviz \
  && rm -rf /var/lib/apt/lists/* && apt-get clean

RUN set -eux; \
  echo "Installing cmake-3.17" && \
  wget --no-check-certificate https://cmake.org/files/v3.17/cmake-3.17.3.tar.gz && \
  tar -xzvf cmake-3.17.3.tar.gz && mv cmake-3.17.3 cmake && cd cmake && \
  ./bootstrap && make install

RUN set -eux; \
  echo "Installing Flatbuffers" && \
  cd /src && \
  git clone --depth 1 https://github.com/google/flatbuffers.git && \
  cd flatbuffers && \
  mkdir build && cd build && \
  cmake -G "Unix Makefiles" .. \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_CXX_FLAGS=-fPIC \
  -DFLATBUFFERS_BUILD_TESTS=OFF && \
  make install

RUN set -eux; \
  echo "Installing cppzmq" && \
  git clone --depth 1 https://github.com/zeromq/libzmq.git && \
  cd libzmq && mkdir build && cd build && \
  cmake .. && make install DESTDIR=./install

RUN set -eux; \
  pip3 install pyzmq;

RUN set -eux; \
  echo "Installing OpenCV"; \
  apt-get update; \
  apt-get install -y -qq \
  libgstreamer1.0 \
  libgstreamer1.0-dev \
  libgstreamer-plugins-bad1.0-0 \
  libgstreamer-plugins-base1.0-0 \
  libgstreamer-plugins-base1.0-dev \
  libv4l-dev \
  libdc1394-22-dev \
  libavformat-dev \
  libavutil-dev \
  libswscale-dev; \
  git clone --branch 3.1.0 --depth 1 https://github.com/opencv/opencv_contrib.git; \
  git clone --branch 3.1.0 --depth 1 https://github.com/opencv/opencv.git && \
  cd opencv && mkdir -p build && cd build && \
  cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D INSTALL_C_EXAMPLES=OFF \
    -D WITH_TBB=ON \
    -D WITH_V4L=ON \
    -D WITH_QT=OFF \
    -D WITH_OPENGL=ON \
    -D WITH_GSTREAMER=ON \
    -D BUILD_opencv_python3=ON \
    -D BUILD_opencv_python2=OFF \
    -D BUILD_opencv_java=OFF \
    -D WITH_GTK=ON \
    -D BUILD_TESTS=OFF \
    -D BUILD_PERF_TESTS=OFF \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D OPENCV_EXTRA_MODULES_PATH=/src/opencv_contrib/modules \
    -D BUILD_EXAMPLES=OFF .. && \
  make install DESTDIR=./install; \
  rm -rf /var/lib/apt/lists/* && apt-get clean

ARG USERNAME=developer

# Create the user
RUN set -eux; \
  echo "Setting up user"; \
  apt-get update; \
  apt-get install -qq -y sudo gosu; \
  rm -rf /var/lib/apt/lists/* && apt-get clean; \
  useradd -s /bin/bash -MU $USERNAME --no-log-init; \
  echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME; \
  chmod 0440 /etc/sudoers.d/$USERNAME; \
  usermod -a -G video $USERNAME; \
  echo "Done."

#COPY ./tools/docker/entrypoint.sh /usr/local/bin/entrypoint.sh

#ENTRYPOINT [ "/usr/local/bin/entrypoint.sh" ]
CMD ["/bin/bash"]